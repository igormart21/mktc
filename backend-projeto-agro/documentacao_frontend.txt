DOCUMENTAÇÃO PARA INTEGRAÇÃO FRONTEND - AGROMARKETPLACE
=================================================

1. CONFIGURAÇÃO INICIAL
----------------------
Base URL API: http://localhost:8000/api/
Headers necessários:
{
    'Content-Type': 'application/json',
    'Authorization': 'Bearer ${token}'  // Para rotas autenticadas
}

Configuração CORS:
- Origens permitidas: localhost:3000, localhost:3001
- Métodos: GET, POST, PUT, PATCH, DELETE
- Credenciais: Permitidas

2. AUTENTICAÇÃO
--------------
Endpoint: /api/token/
Método: POST
Payload:
{
    "email": "string",
    "password": "string"
}
Resposta:
{
    "access": "string",  // JWT Token válido por 60 minutos
    "refresh": "string"  // Token de refresh válido por 1 dia
}

Refresh Token:
Endpoint: /api/token/refresh/
Método: POST
Payload: {
    "refresh": "string"
}

3. ENDPOINTS DISPONÍVEIS
----------------------

USUÁRIOS
--------
1. Registro de Usuário
   Endpoint: /api/usuarios/registro/
   Método: POST
   Payload:
   {
       "email": "string",
       "password": "string",
       "nome": "string",
       "tipo": "COMPRADOR|VENDEDOR",
       "cpf": "string",
       "telefone": "string"
   }

2. Perfil do Usuário
   Endpoint: /api/usuarios/perfil/
   Método: GET
   Autenticação: Requerida

PRODUTOS
--------
1. Listar Produtos
   Endpoint: /api/produtos/
   Método: GET
   Parâmetros Query:
   - categoria: string
   - search: string
   - page: number
   - page_size: number

2. Detalhe do Produto
   Endpoint: /api/produtos/{id}/
   Método: GET

3. Criar Produto (Vendedor)
   Endpoint: /api/produtos/
   Método: POST
   Autenticação: Requerida
   Content-Type: multipart/form-data
   Payload:
   {
       "nome": "string",
       "descricao": "string",
       "preco": number,
       "estoque": number,
       "categoria": "string",
       "imagem": File
   }

4. Atualizar Produto
   Endpoint: /api/produtos/{id}/
   Método: PUT/PATCH
   Autenticação: Requerida

VENDAS
------
1. Criar Venda
   Endpoint: /api/vendas/
   Método: POST
   Autenticação: Requerida
   Payload:
   {
       "produto": number,
       "observacoes": "string"
   }

2. Listar Vendas
   Endpoint: /api/vendas/
   Método: GET
   Autenticação: Requerida
   Parâmetros Query:
   - status: "PENDENTE|ACEITO|REJEITADO|CANCELADO"
   - page: number

3. Atualizar Status da Venda
   Endpoint: /api/vendas/{id}/
   Método: PATCH
   Autenticação: Requerida
   Payload:
   {
       "status": "ACEITO|REJEITADO|CANCELADO"
   }

4. TRATAMENTO DE ERROS
---------------------
Formato padrão de erro:
{
    "error": "string",
    "message": "string",
    "details": {} // opcional
}

Códigos de Status:
- 200: Sucesso
- 201: Criado com sucesso
- 400: Erro de validação
- 401: Não autorizado
- 403: Proibido
- 404: Não encontrado
- 500: Erro interno

5. BOAS PRÁTICAS REACT
---------------------
1. Estrutura de Pastas Recomendada:
   src/
   ├── components/
   ├── pages/
   ├── services/
   ├── hooks/
   ├── contexts/
   └── utils/

2. Exemplo de Service para API:
```javascript
import axios from 'axios';

const api = axios.create({
    baseURL: 'http://localhost:8000/api'
});

api.interceptors.request.use((config) => {
    const token = localStorage.getItem('token');
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
});

export default api;
```

3. Exemplo de Hook para Autenticação:
```javascript
import { useState, useEffect } from 'react';
import api from '../services/api';

export function useAuth() {
    const [user, setUser] = useState(null);

    const login = async (email, password) => {
        const response = await api.post('/token/', { email, password });
        const { access, refresh } = response.data;
        localStorage.setItem('token', access);
        localStorage.setItem('refresh', refresh);
    };

    const logout = () => {
        localStorage.removeItem('token');
        localStorage.removeItem('refresh');
        setUser(null);
    };

    return { user, login, logout };
}
```

6. EXEMPLOS DE REQUISIÇÕES
------------------------
1. Login:
```javascript
const handleLogin = async (email, password) => {
    try {
        const response = await api.post('/token/', { email, password });
        localStorage.setItem('token', response.data.access);
        // Redirecionar ou atualizar estado
    } catch (error) {
        console.error('Erro no login:', error);
    }
};
```

2. Listar Produtos:
```javascript
const fetchProdutos = async (page = 1) => {
    try {
        const response = await api.get('/produtos/', {
            params: { page, page_size: 10 }
        });
        return response.data;
    } catch (error) {
        console.error('Erro ao buscar produtos:', error);
        return null;
    }
};
```

3. Criar Venda:
```javascript
const criarVenda = async (produtoId, observacoes) => {
    try {
        const response = await api.post('/vendas/', {
            produto: produtoId,
            observacoes
        });
        return response.data;
    } catch (error) {
        console.error('Erro ao criar venda:', error);
        throw error;
    }
};
```

7. WEBSOCKETS (Se implementado no futuro)
--------------------------------------
URL: ws://localhost:8000/ws/
Eventos disponíveis:
- nova_venda
- status_atualizado
- novo_produto

8. OBSERVAÇÕES IMPORTANTES
------------------------
1. Sempre tratar erros nas requisições
2. Implementar refresh token automático
3. Usar loading states para feedback ao usuário
4. Implementar validação de formulários
5. Manter consistência no tratamento de datas (usar bibliotecas como date-fns)
6. Implementar sistema de cache quando apropriado
7. Usar variáveis de ambiente para configurações
8. Implementar logout automático quando token expirar

9. PRÓXIMOS PASSOS
-----------------
1. Implementar sistema de pagamentos
2. Adicionar chat entre usuários
3. Sistema de avaliações
4. Melhorar interface mobile
5. Implementar PWA 