GUIA DE DESENVOLVIMENTO FRONTEND - AGROMARKETPLACE
===============================================

1. CONFIGURAÇÃO INICIAL DO PROJETO
--------------------------------
1. Criar projeto React:
```bash
npx create-react-app agromarketplace-frontend
cd agromarketplace-frontend
```

2. Instalar dependências essenciais:
```bash
npm install @mui/material @emotion/react @emotion/styled
npm install @mui/icons-material
npm install react-router-dom
npm install axios
npm install react-query
npm install @tanstack/react-query
npm install date-fns
```

3. Estrutura inicial de pastas:
```
src/
├── components/
│   ├── layout/
│   ├── common/
│   └── forms/
├── pages/
├── services/
├── hooks/
├── contexts/
├── utils/
└── styles/
```

2. DESENVOLVIMENTO POR ETAPAS
---------------------------

ETAPA 1: PÁGINA DE LOGIN
------------------------
1. Criar componentes base:
```bash
mkdir src/components/layout/Login
touch src/components/layout/Login/LoginForm.jsx
touch src/components/layout/Login/LoginPage.jsx
```

2. Implementar LoginForm:
```javascript
// LoginForm.jsx
import { useState } from 'react';
import { useAuth } from '../../hooks/useAuth';
import { TextField, Button, Box } from '@mui/material';

export const LoginForm = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const { login } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await login(email, password);
    } catch (error) {
      console.error('Erro no login:', error);
    }
  };

  return (
    <Box component="form" onSubmit={handleSubmit}>
      <TextField
        label="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        fullWidth
        margin="normal"
      />
      <TextField
        label="Senha"
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        fullWidth
        margin="normal"
      />
      <Button type="submit" variant="contained" fullWidth>
        Entrar
      </Button>
    </Box>
  );
};
```

3. Implementar LoginPage:
```javascript
// LoginPage.jsx
import { LoginForm } from './LoginForm';
import { Box, Container, Typography } from '@mui/material';

export const LoginPage = () => {
  return (
    <Container maxWidth="sm">
      <Box sx={{ mt: 8, mb: 4 }}>
        <Typography variant="h4" align="center">
          AgroMarketplace
        </Typography>
        <LoginForm />
      </Box>
    </Container>
  );
};
```

4. Testar:
- Verificar se o formulário renderiza
- Testar validação de campos
- Testar integração com backend
- Verificar redirecionamento após login

ETAPA 2: DASHBOARD PRINCIPAL
---------------------------
1. Criar componentes:
```bash
mkdir src/components/layout/Dashboard
touch src/components/layout/Dashboard/DashboardPage.jsx
touch src/components/layout/Dashboard/StatsCard.jsx
```

2. Implementar StatsCard:
```javascript
// StatsCard.jsx
import { Card, CardContent, Typography } from '@mui/material';

export const StatsCard = ({ title, value, icon }) => {
  return (
    <Card>
      <CardContent>
        {icon}
        <Typography variant="h6">{title}</Typography>
        <Typography variant="h4">{value}</Typography>
      </CardContent>
    </Card>
  );
};
```

3. Implementar DashboardPage:
```javascript
// DashboardPage.jsx
import { Grid } from '@mui/material';
import { StatsCard } from './StatsCard';
import { useQuery } from '@tanstack/react-query';
import { api } from '../../services/api';

export const DashboardPage = () => {
  const { data: stats } = useQuery(['dashboardStats'], async () => {
    const response = await api.get('/dashboard/stats/');
    return response.data;
  });

  return (
    <Grid container spacing={3}>
      <Grid item xs={12} md={4}>
        <StatsCard
          title="Total de Vendas"
          value={stats?.totalVendas || 0}
          icon={<ShoppingCartIcon />}
        />
      </Grid>
      {/* Adicionar mais cards conforme necessário */}
    </Grid>
  );
};
```

4. Testar:
- Verificar carregamento dos dados
- Testar responsividade
- Verificar atualização em tempo real

ETAPA 3: LISTAGEM DE PRODUTOS
----------------------------
1. Criar componentes:
```bash
mkdir src/components/products
touch src/components/products/ProductList.jsx
touch src/components/products/ProductCard.jsx
```

2. Implementar ProductCard:
```javascript
// ProductCard.jsx
import { Card, CardMedia, CardContent, Typography } from '@mui/material';

export const ProductCard = ({ product }) => {
  return (
    <Card>
      <CardMedia
        component="img"
        height="140"
        image={product.imagem}
        alt={product.nome}
      />
      <CardContent>
        <Typography variant="h6">{product.nome}</Typography>
        <Typography variant="body2">{product.descricao}</Typography>
        <Typography variant="h6">R$ {product.preco}</Typography>
      </CardContent>
    </Card>
  );
};
```

3. Implementar ProductList:
```javascript
// ProductList.jsx
import { Grid } from '@mui/material';
import { ProductCard } from './ProductCard';
import { useQuery } from '@tanstack/react-query';
import { api } from '../../services/api';

export const ProductList = () => {
  const { data: products } = useQuery(['products'], async () => {
    const response = await api.get('/produtos/');
    return response.data;
  });

  return (
    <Grid container spacing={3}>
      {products?.map((product) => (
        <Grid item xs={12} sm={6} md={4} key={product.id}>
          <ProductCard product={product} />
        </Grid>
      ))}
    </Grid>
  );
};
```

4. Testar:
- Verificar carregamento dos produtos
- Testar paginação
- Verificar filtros
- Testar responsividade

ETAPA 4: GERENCIAMENTO DE VENDAS
------------------------------
1. Criar componentes:
```bash
mkdir src/components/sales
touch src/components/sales/SalesList.jsx
touch src/components/sales/SaleCard.jsx
```

2. Implementar SaleCard:
```javascript
// SaleCard.jsx
import { Card, CardContent, Typography, Button } from '@mui/material';

export const SaleCard = ({ sale, onStatusChange }) => {
  return (
    <Card>
      <CardContent>
        <Typography variant="h6">Venda #{sale.id}</Typography>
        <Typography>Status: {sale.status}</Typography>
        <Typography>Produto: {sale.produto.nome}</Typography>
        <Button
          onClick={() => onStatusChange(sale.id, 'ACEITO')}
          disabled={sale.status === 'ACEITO'}
        >
          Aprovar
        </Button>
      </CardContent>
    </Card>
  );
};
```

3. Implementar SalesList:
```javascript
// SalesList.jsx
import { Grid } from '@mui/material';
import { SaleCard } from './SaleCard';
import { useQuery, useMutation } from '@tanstack/react-query';
import { api } from '../../services/api';

export const SalesList = () => {
  const { data: sales } = useQuery(['sales'], async () => {
    const response = await api.get('/vendas/');
    return response.data;
  });

  const { mutate: updateStatus } = useMutation(
    async ({ saleId, status }) => {
      await api.patch(`/vendas/${saleId}/`, { status });
    }
  );

  return (
    <Grid container spacing={3}>
      {sales?.map((sale) => (
        <Grid item xs={12} key={sale.id}>
          <SaleCard
            sale={sale}
            onStatusChange={updateStatus}
          />
        </Grid>
      ))}
    </Grid>
  );
};
```

4. Testar:
- Verificar listagem de vendas
- Testar mudança de status
- Verificar notificações
- Testar atualização em tempo real

3. ORDEM DE DESENVOLVIMENTO
-------------------------
1. Autenticação
   - Login/Registro
   - Recuperação de senha
   - Perfil do usuário

2. Dashboard
   - Cards de estatísticas
   - Gráficos
   - Timeline de atividades

3. Produtos
   - Listagem
   - Detalhes
   - Criação/Edição
   - Upload de imagens

4. Vendas
   - Listagem
   - Detalhes
   - Aprovação/Rejeição
   - Notificações

5. Carrinho/Checkout
   - Adição/Remoção
   - Resumo
   - Formulário de entrega
   - Confirmação

4. TESTES POR ETAPA
-----------------
1. Testes Unitários
   - Componentes isolados
   - Hooks
   - Utilitários

2. Testes de Integração
   - Fluxos completos
   - API
   - Estado global

3. Testes E2E
   - Fluxos de usuário
   - Responsividade
   - Performance

5. DEPLOY E MONITORAMENTO
-----------------------
1. Configurar CI/CD
2. Monitorar erros
3. Analisar performance
4. Coletar feedback 